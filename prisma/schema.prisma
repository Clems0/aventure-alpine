datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  profile       UserProfile?    // Relation vers UserProfile via userId
  profileId     String?         @unique  // Clé étrangère vers UserProfile
  adventures    Adventure[]
  achievements  Achievement[]
  companions    Companion[]
  city          String          @default("Unknown")  // Ajoute une valeur par défaut temporaire
  country       String          @default("Unknown") // Ajoute une valeur par défaut temporaire
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id        String  @id @default(cuid())
  userId    String  @unique
  title     String?
  totalTime Int      @default(0)
  summits   Int      @default(0)

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Adventure {
  id          String   @id @default(cuid())
  userId      String
  name        String
  location    String
  altitude    Int
  date        DateTime
  duration    Int  // Durée en heures

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id          String  @id @default(cuid())
  name        String
  location    String
  image       String
  difficulty  String  // "facile", "moyen", "difficile"
  description String?
  createdAt   DateTime @default(now())
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Companion {
  id          String   @id @default(cuid())
  userId      String
  name        String
  avatar      String?

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}



 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}